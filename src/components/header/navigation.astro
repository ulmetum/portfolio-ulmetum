---
import HomeSketch from '@/assets/home-sketch.png'
import ContactSketch from '@/assets/contact-sketch.png'
import CodeSketch from '@/assets/code-sketch.png'

const itemsMenu = [
  {
    name: 'Inicio',
    href: '/',
    icon: HomeSketch,
  },
  {
    name: 'Proyectos',
    href: '/proyectos',
    icon: CodeSketch,
  },
  {
    name: 'Contacto',
    href: '/contacto',
    icon: ContactSketch,
  },
]

// const [home, projects, contact] = itemsMenu

interface Props {
  classNames?: string
}

const { classNames } = Astro.props
---

<header class:list={['animate-fade-in animate-delay-800', classNames]}>
  <nav class="main-menu relative flex gap-x-2 sm:gap-x-4 justify-start">
    {
      itemsMenu.map((item) => (
        <div class="menu-item">
          <a
            data-icon={item.icon.src}
            data-path={item.href}
            class="group relative link-item duration-500 group transition-all ease-(var(--transition-ease))"
            href={item.href}
          >
            <h2 class="text-xl sm:text-2xl transition-all duration-200 group-hover:text-primary">
              {item.name}
            </h2>
          </a>
        </div>
      ))
    }
    <div
      class="underline absolute bottom-0 left-0 h-[1px] bg-primary transition-all duration-300"
    >
    </div>
  </nav>
</header>

<style>
  .active h2 {
    color: var(--color-primary);
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const underline = document.querySelector('.underline') as HTMLDivElement
    const menuItems = document.querySelectorAll(
      '.menu-item',
    ) as NodeListOf<HTMLDivElement>
    const mainMenu = document.querySelector('.main-menu') as HTMLElement
    const pathname = window.location.pathname.split('/')[1]
    let menuRect = mainMenu.getBoundingClientRect()

    let activeLeft = 0
    let activeWidth = 0

    // Función que actualiza la posición y tamaño del underline
    const updateUnderline = () => {
      menuRect = mainMenu.getBoundingClientRect()

      menuItems.forEach((item) => {
        const linkItem = item.querySelector('.link-item') as HTMLAnchorElement
        const dataPath = linkItem.dataset.path?.split('/')[1]
        const linkRect = linkItem.getBoundingClientRect()
        const isActive = pathname === dataPath

        if (isActive) {
          // Aplicar estilos solo al link para que el underline pueda moverse al item activo
          linkItem.style.pointerEvents = 'none'
          linkItem.classList.add('active')

          activeWidth = linkRect.width
          activeLeft = linkRect.left - menuRect.left

          // Evitar animación de underline al navegar entre rutas
          if (underline.style.left !== `${activeLeft}px`) {
            underline.style.transition = 'none'
            underline.style.left = `${activeLeft}px`
            underline.style.width = `${activeWidth}px`
            underline.offsetHeight // Fuerza reflow
            underline.style.transition = ''
          }
        }
      })
    }

    // Llamada inicial para establecer la posición del underline
    updateUnderline()

    menuItems.forEach((item) => {
      const linkItem = item.querySelector('.link-item') as HTMLAnchorElement

      item.addEventListener('mouseover', () => {
        const hoverRect = linkItem.getBoundingClientRect()
        underline.style.width = `${hoverRect.width}px`
        underline.style.left = `${hoverRect.left - menuRect.left}px`
      })

      item.addEventListener('mouseout', () => {
        underline.style.width = `${activeWidth}px`
        underline.style.left = `${activeLeft}px`
      })
    })

    // Actualizar underline en redimensionado de ventana
    window.addEventListener('resize', () => {
      updateUnderline()
    })
  })
</script>
