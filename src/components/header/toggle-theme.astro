---
interface Props {
  widthLabel?: number
  heightLabel?: number
  classNames?: string
}

const { widthLabel = 60, heightLabel = 30, classNames } = Astro.props as Props
---

<div class:list={['absolute right-2 ', classNames]}>
  <input type="checkbox" id="theme-toggle" />

  <div class="display">
    <label for="theme-toggle">
      <div class="circle">
        <svg
          class="sun"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="black"
        >
          <path
            d="M12 2.25a.75.75 0 0 1 .75.75v2.25a.75.75 0 0 1-1.5 0V3a.75.75 0 0 1 .75-.75ZM7.5 12a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM18.894 6.166a.75.75 0 0 0-1.06-1.06l-1.591 1.59a.75.75 0 1 0 1.06 1.061l1.591-1.59ZM21.75 12a.75.75 0 0 1-.75.75h-2.25a.75.75 0 0 1 0-1.5H21a.75.75 0 0 1 .75.75ZM17.834 18.894a.75.75 0 0 0 1.06-1.06l-1.59-1.591a.75.75 0 1 0-1.061 1.06l1.59 1.591ZM12 18a.75.75 0 0 1 .75.75V21a.75.75 0 0 1-1.5 0v-2.25A.75.75 0 0 1 12 18ZM7.758 17.303a.75.75 0 0 0-1.061-1.06l-1.591 1.59a.75.75 0 0 0 1.06 1.061l1.591-1.59ZM6 12a.75.75 0 0 1-.75.75H3a.75.75 0 0 1 0-1.5h2.25A.75.75 0 0 1 6 12ZM6.697 7.757a.75.75 0 0 0 1.06-1.06l-1.59-1.591a.75.75 0 0 0-1.061 1.06l1.59 1.591Z"
          ></path>
        </svg>
        <svg
          class="moon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M9.528 1.718a.75.75 0 0 1 .162.819A8.97 8.97 0 0 0 9 6a9 9 0 0 0 9 9 8.97 8.97 0 0 0 3.463-.69.75.75 0 0 1 .981.98 10.503 10.503 0 0 1-9.694 6.46c-5.799 0-10.5-4.7-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 0 1 .818.162Z"
            clip-rule="evenodd"></path>
        </svg>
      </div>
    </label>
  </div>
</div>

<style define:vars={{ widthLabel, heightLabel }}>
  @media (width>=480px) {
    label,
    .circle {
      --widthLabel: 60 !important;
      --heightLabel: 30 !important;
    }
  }
  input {
    display: none;
  }

  .display {
    display: flex;
    align-items: center;
    justify-content: center;
    & * {
      transition: all 0.3s ease-in-out;
    }
  }

  label {
    width: calc(var(--widthLabel) * 1px);
    height: calc(var(--heightLabel) * 1px);
    border-radius: 99px;
    background-color: rgba(var(--color-background-rgb), 0.5);
    box-shadow: 0 0 0 1px rgba(var(--color-rgb), 0.05) inset;
    cursor: pointer;
    position: relative;
  }

  .circle {
    width: calc(var(--heightLabel) * 1px - 4px);
    height: calc(var(--heightLabel) * 1px - 4px);
    border-radius: 50%;
    background: white;

    box-shadow: 0 0 0 1px rgba(var(--color-rgb), 0.05) inset;
    position: absolute;
    top: 50%;
    left: 0%;
    transform: translate(10%, -50%);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }
  svg {
    width: 95%;
    position: absolute;
  }

  .sun {
    color: #ffd600;
    margin-top: 0%;
    opacity: 1;
  }
  .moon {
    margin-top: -150%;
    color: white;
    opacity: 0;
  }

  input[type='checkbox']:checked + .display label {
    background: #1f1f21;
    box-shadow: 10px 10px 30px rgba(0, 0, 0, 0.5) inset;
  }

  input[type='checkbox']:checked + .display label .circle {
    left: 100%;
    transform: translate(-110%, -50%);
    background: #2c2c2f;
    box-shadow:
      10px 10px 20px rgba(0, 0, 0, 0.5),
      -10px -10px 30px rgba(0, 0, 0, 0.5) inset;
  }

  input[type='checkbox']:checked + .display label .circle .sun {
    margin-top: 150%;
    opacity: 0;
  }

  input[type='checkbox']:checked + .display label .circle .moon {
    margin-top: 0%;
    opacity: 1;
  }
</style>

<script>
  const themeToggleInput = document.getElementById(
    'theme-toggle',
  ) as HTMLInputElement

  if (localStorage.getItem('color-theme') === null) {
    localStorage.setItem('color-theme', 'light')
  }

  if (localStorage.getItem('color-theme') === 'light') {
    document.documentElement.classList.add('light')
    themeToggleInput.checked = false
  }

  if (localStorage.getItem('color-theme') === 'dark') {
    document.documentElement.classList.add('dark')
    themeToggleInput.checked = true
  }

  themeToggleInput.addEventListener('change', function () {
    // if set via local storage previously

    if (localStorage.getItem('color-theme')) {
      if (localStorage.getItem('color-theme') === 'light') {
        document.documentElement.classList.add('dark')
        localStorage.setItem('color-theme', 'dark')
      } else {
        document.documentElement.classList.remove('dark')
        localStorage.setItem('color-theme', 'light')
      }

      // if NOT set via local storage previously
    }
    //  else {
    //   if (document.documentElement.classList.contains('dark')) {
    //     document.documentElement.classList.remove('dark')
    //     localStorage.setItem('color-theme', 'light')
    //   } else {
    //     document.documentElement.classList.add('dark')
    //     localStorage.setItem('color-theme', 'dark')
    //   }
    // }
  })
</script>
